"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),g=r,f=c["".concat(s,".").concat(g)]||c[g]||d[g]||i;return n?a.createElement(f,l(l({ref:t},u),{},{components:n})):a.createElement(f,l({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=g;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},9733:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={id:"configuration",title:"Configuration",sidebar_label:"Configuration",slug:"/configuration"},l=void 0,o={unversionedId:"configuration",id:"configuration",title:"Configuration",description:"NOTE: These docs are under active development \ud83d\udc77\u200d\u2640\ufe0f\ud83d\udc77",source:"@site/docs/configuration.md",sourceDirName:".",slug:"/configuration",permalink:"/float-subgraph-uncrashable/docs/configuration",draft:!1,editUrl:"https://github.com/Float-Capital/float-subgraph-uncrashable/tree/dev/docs/docs/configuration.md",tags:[],version:"current",frontMatter:{id:"configuration",title:"Configuration",sidebar_label:"Configuration",slug:"/configuration"},sidebar:"someSidebar",previous:{title:"Installation",permalink:"/float-subgraph-uncrashable/docs/installation"},next:{title:"Video Tutorial",permalink:"/float-subgraph-uncrashable/docs/tutorial"}},s={},p=[{value:"Getting Started",id:"getting-started",level:2},{value:"Uncrashable Config",id:"uncrashable-config",level:2},{value:"Network Config",id:"network-config",level:2},{value:"EntitySettings",id:"entitysettings",level:2},{value:"entityId",id:"entityid",level:3},{value:"setters",id:"setters",level:3},{value:"Using the Float Graph Uncrashable",id:"using-the-float-graph-uncrashable",level:2},{value:"Usage examples from the above uncrashable-config.yaml",id:"usage-examples-from-the-above-uncrashable-configyaml",level:2}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("sub",null,(0,r.kt)("sup",null," NOTE: These docs are under active development \ud83d\udc77\u200d\u2640\ufe0f\ud83d\udc77 ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getting-started"},"Getting Started"),(0,r.kt)("p",null,"Subgraph Uncrashable by Float is a complementary tool to an existing subgraph that ensures data safety and atomic loading. To begin developing your subgraph start ",(0,r.kt)("a",{parentName:"p",href:"https://thegraph.com/docs/en/developing/creating-a-subgraph/"},"here"),"."),(0,r.kt)("h2",{id:"uncrashable-config"},"Uncrashable Config"),(0,r.kt)("p",null,"Once your subgraph is in place, Subgraph Uncrashable can be used to create helper functions for your entities to ensure your subgraph doesn't crash."),(0,r.kt)("p",null,"Below is an example ",(0,r.kt)("inlineCode",{parentName:"p"},"uncrashable-config.yaml")," file for the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphprotocol/example-subgraph"},"gravatar example subgraph"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'networkConfig:\n  entityIdPrefixes:\n    - networks:\n        - mainnet\n      prefix: ""\n    - networks:\n        - ganache\n      prefix: local\nentitySettings:\n  Gravatar:\n    useDefault:\n      imageUrl: {}\n    setters:\n      - name: updateGravatar\n        fields:\n          - owner\n          - displayName\n          - imageUrl\n      - name: setOwner\n        fields:\n          - owner\n      - name: setDisplayName\n        fields:\n          - displayName\n      - name: setImageUrl\n        fields:\n          - imageUrl\n    entityId:\n      - name: gravityId\n        type: BigInt\n')),(0,r.kt)("h2",{id:"network-config"},"Network Config"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"networkConfig")," specification in the ",(0,r.kt)("inlineCode",{parentName:"p"},"uncrashable-config.yaml")," allows for specifying certain prefixes for the entity IDs. This is useful when deploying the same subgraph on multiple chains."),(0,r.kt)("p",null,"Required fields:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"entityIdPrefixes")," \u2014 An array of ",(0,r.kt)("inlineCode",{parentName:"li"},"networks")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"prefix")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"networks")," \u2014 An array of all networks that would correspond to the prefix"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prefix")," - A string appended to the start of any ID on that specific network")),(0,r.kt)("p",null,"Example of generated function for the Gravatar Entity ID as per the above configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export function generateGravatarId(gravityId: BigInt): string {\n  return ENTITY_ID_PREFIX + gravityId.toString();\n}\n")),(0,r.kt)("h2",{id:"entitysettings"},"EntitySettings"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"entitySettings")," field allows for specifying the configuration of any entity in the subgraph schema.\nThe following fields are supported:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"useDefault")," \u2014 Specify which entity parameters are defaulted when creating the entity"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"entityId")," \u2014 Specify the fields and their types that will comprise the ID of the entity. (This ensures standardization of all entity IDs) - see generated example above"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setters")," - An array of setter functions that can be used to be set or update entity parameters after initial creation of the entity")),(0,r.kt)("h3",{id:"entityid"},"entityId"),(0,r.kt)("p",null,"Supported types for entityId values are:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"String;\nBigInt;\nBytes;\nAddress;\nBigDecimal;\nconstant;\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"constant")," is a unique type to the Float Subgraph Uncrashable and allows for specifying a constant string in the ID. Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'entityId:\n  - type: constant\n    value: "Gravatar"\n')),(0,r.kt)("h3",{id:"setters"},"setters"),(0,r.kt)("p",null,"Specify setter functions to update entity parameters after entity creation. Ensures atomic loading and saving."),(0,r.kt)("p",null,"Example of ",(0,r.kt)("inlineCode",{parentName:"p"},"updateGravatar")," as per the above ",(0,r.kt)("inlineCode",{parentName:"p"},"uncrashable-config.yaml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export function updateGravatar(\n  entityId: string,\n  newValues: updateGravatarValues\n): void {\n  let entity = getGravatar(entityId);\n  entity.owner = newValues.owner;\n  entity.displayName = newValues.displayName;\n  entity.imageUrl = newValues.imageUrl;\n\n  entity.save();\n}\n")),(0,r.kt)("h2",{id:"using-the-float-graph-uncrashable"},"Using the Float Graph Uncrashable"),(0,r.kt)("p",null,"Once the ",(0,r.kt)("inlineCode",{parentName:"p"},"uncrashable-config.yaml")," has been created run the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"graph codegen\n")),(0,r.kt)("p",null,"and then run the graph uncrashable codegen."),(0,r.kt)("p",null,"Now you can import the generated functions from the ",(0,r.kt)("inlineCode",{parentName:"p"},"UncrashableHelpers.ts")," into your subgraph mapping files."),(0,r.kt)("h2",{id:"usage-examples-from-the-above-uncrashable-configyaml"},"Usage examples from the above uncrashable-config.yaml"),(0,r.kt)("p",null,"Create Gravatar:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"createGravatar(generateGravatarId(event.params.id), {\n  owner: event.params.owner,\n  displayName: event.params.displayName,\n});\n")),(0,r.kt)("p",null,"This creates and saves a Gravatar entity with the correct ID and initial parameters set. ",(0,r.kt)("inlineCode",{parentName:"p"},"imageUrl")," is defaulted in this example."),(0,r.kt)("p",null,"Update Gravatar setter function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"updateGravatar(generateGravatarId(event.params.id), {\n  owner: event.params.owner,\n  displayName: event.params.displayName,\n  imageUrl: event.params.imageUrl,\n});\n")),(0,r.kt)("p",null,"By using the ",(0,r.kt)("inlineCode",{parentName:"p"},"generateGravatarId")," function, this ensures that the id always conforms to configured specifications."),(0,r.kt)("p",null,"Creating and updating entities in the above way provides assurance that the data in the entities is always up to date and as expected."))}c.isMDXComponent=!0}}]);